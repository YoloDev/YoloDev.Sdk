name: CI

on:
  - push
  - pull_request

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    env:
      DOTNET_NOLOGO: 'true'
      DOTNET_CLI_TELEMETRY_OPTOUT: 'true'
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 'true'

    steps:
      - name: ⏬ Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: 🔽 Install dotnet
        uses: actions/setup-dotnet@v1

      - name: 🔽 Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.10
        with:
          versionSpec: '5.x'

      - name: 🔍 Print dotnet info
        run: dotnet --info

      - name: 🔍 Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.10
        with:
          useConfigFile: true

      - name: 🔽 Restore
        run: dotnet restore -p:Configuration=Release

      - name: 🔨 Build
        run: dotnet build --configuration Release

      - name: 📦 Pack
        run: dotnet pack --configuration Release --no-build

      - name: 🧪 Test (build samples)
        run: dotnet build -p:YoloDevSdkVersion=${{ steps.gitversion.outputs.fullSemVer }}
        working-directory: sample

      - name: 🔼 Upload packages as artifact
        uses: actions/upload-artifact@v2
        with:
          name: nuget
          path: artifacts/nuget/

      - name: 🔼 Upload global.json as artifact
        uses: actions/upload-artifact@v2
        with:
          name: global-json
          path: global.json

  publish:
    name: Publish
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    environment: nuget
    needs:
      - build

    steps:
      - name: 🔽 Download global.json artifact
        uses: actions/download-artifact@v2
        with:
          name: global-json

      - name: 🔽 Download global.json artifact
        uses: actions/download-artifact@v2
        with:
          name: nuget

      - name: 🔽 Install dotnet
        uses: actions/setup-dotnet@v1

      - name: 🔼 Publish package to nuget
        run: dotnet nuget push --force-english-output --api-key '${{ secrets.NUGET_API_KEY }}' --source '${{ secrets.NUGET_FEED }}' --skip-duplicate "*.nupkg"
