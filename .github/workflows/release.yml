name: release-please

on:
  push:
    branches: [main]

jobs:
  release_please:
    name: Release Please
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      actions: write
      statuses: write

    steps:
      - id: release
        uses: GoogleCloudPlatform/release-please-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          command: manifest

      - id: transform
        name: Massage output
        env:
          PATHS_RELEASED: ${{ steps.release.outputs.paths_released }}
          TAG_NAME: ${{ steps.release.outputs.tag_name }}
          UPLOAD_URL: ${{ steps.release.outputs.upload_url }}
        run: |
          ANY=$(echo $PATHS_RELEASED | jq '. | length | . > 0')
          echo "ANY: $ANY"
          echo "TAG_NAME: '$TAG_NAME'"
          echo "UPLOAD_URL: '$UPLOAD_URL'"
          echo "::set-output name=any::$ANY"

      - name: Print outputs
        env:
          ANY: ${{ steps.transform.outputs.any }}
        run: |
          echo "any: '$ANY'"

    outputs:
      any_released: ${{ steps.transform.outputs.any }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      upload_url: ${{ steps.release.outputs.upload_url }}

  build:
    name: Create Release
    runs-on: ubuntu-latest
    # if: fromJSON(needs.release_please.outputs.any_released)
    needs:
      - release_please

    permissions:
      contents: write

    concurrency:
      group: release

    steps:
      - name: ⏬ Checkout
        uses: actions/checkout@v2

      - name: 🔽 Install dotnet
        uses: actions/setup-dotnet@v1

      - name: 🔍 Print dotnet info
        run: dotnet --info

      - name: 🔽 Restore
        run: dotnet restore -p:Configuration=Release

      - name: 🔨 Build
        run: dotnet build --configuration Release

      - name: 📦 Pack
        run: dotnet pack --configuration Release --no-build

      - name: 🔼 Upload packages as artifact
        uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          name: nuget
          path: artifacts/nuget/

      - name: 🔼 Upload global.json as artifact
        uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          name: global-json
          path: global.json

      # - name: 🔽 Download nuget artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: nuget
      #     path: nuget

      # - name: 🖃 Create GitHub Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     prerelease: false
      #     tag_name: v${{ needs.build.outputs.version }}
      #     body: ${{ needs.build.outputs.changelog }}
      #     files: |
      #       nuget/*.nupkg
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # githubpkg:
  #   name: Push to GitHub Packages
  #   runs-on: ubuntu-latest
  #   permissions:
  #     packages: write
  #   needs:
  #     - build
  #     - release

  #   steps:
  #     - name: 🔽 Download nuget artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: nuget
  #         path: nuget

  #     - name: 🔽 Download global-json artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: global-json

  #     - name: 🔽 Install dotnet
  #       uses: actions/setup-dotnet@v1

  #     - name: 🔼 Publish package to nuget
  #       run: dotnet nuget push --force-english-output --api-key '${{ secrets.GITHUB_TOKEN }}' --source 'https://nuget.pkg.github.com/YoloDev/index.json' --skip-duplicate "nuget/*.nupkg"

  # nuget:
  #   name: Push to Nuget
  #   runs-on: ubuntu-latest
  #   environment: nuget
  #   needs:
  #     - build
  #     - release
  #     - githubpkg

  #   steps:
  #     - name: 🔽 Download nuget artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: nuget
  #         path: nuget

  #     - name: 🔽 Download global-json artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: global-json

  #     - name: 🔽 Install dotnet
  #       uses: actions/setup-dotnet@v1

  #     - name: 🔼 Publish package to nuget
  #       run: dotnet nuget push --force-english-output --api-key '${{ secrets.NUGET_API_KEY }}' --source '${{ secrets.NUGET_FEED }}' --skip-duplicate "nuget/*.nupkg"
